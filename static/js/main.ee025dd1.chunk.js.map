{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","list","lightTheme","handleThemeChange","bind","assertThisInitialized","thisOne","fetch","proxyUrl","then","response","json","listOfMovies","setState","catch","error","console","log","document","body","classList","remove","add","columns","Header","accessor","Cell","props","react_default","a","createElement","className","original","actor_1_name","actor_2_name","id","d","genres","split","join","filterable","sortable","filterAll","filterMethod","filter","row","parseInt","value","href","movie_imdb_link","target","rel","movie_title","component_default","defaultChecked","icons","onChange","es","data","defaultPageSize","defaultFilterMethod","rows","matchSorter","keys","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee025dd1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport Toggle from \"react-toggle\";\nimport \"react-toggle/style.css\";\nimport \"../styles/App.css\";\nimport matchSorter from \"match-sorter\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      list: [],\n      lightTheme: true\n    };\n    this.handleThemeChange = this.handleThemeChange.bind(this);\n  }\n\n  componentDidMount() {\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"http://starlord.hackerearth.com/movies\";\n    let thisOne = this;\n    fetch(proxyUrl + url)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(listOfMovies) {\n        //console.log(JSON.stringify(listOfMovies[0]));\n        thisOne.setState({\n          loading: false,\n          list: listOfMovies\n        });\n      })\n      .catch(error => {\n        console.log(error);\n        thisOne.setState({\n          loading: false,\n          list: []\n        });\n      });\n  }\n  handleThemeChange() {\n    if (this.state.lightTheme) {\n      document.body.classList.remove(\"light\");\n      document.body.classList.add(\"dark\");\n      this.setState({\n        lightTheme: false\n      });\n    } else {\n      document.body.classList.remove(\"dark\");\n      document.body.classList.add(\"light\");\n      this.setState({\n        lightTheme: true\n      });\n    }\n  }\n  render() {\n    const columns = [\n      {\n        Header: \"Name\",\n        accessor: \"movie_title\"\n      },\n      {\n        Header: \"Director\",\n        accessor: \"director_name\"\n      },\n      {\n        Header: \"Actors\",\n        accessor: \"actor_1_name\",\n        Cell: props => (\n          <div>\n            <span className=\"actor_1_name\">{props.original.actor_1_name}</span>,\n            &nbsp;\n            <span className=\"actor_2_name\">{props.original.actor_2_name}</span>\n          </div>\n        )\n      },\n      {\n        Header: \"Genres\",\n        id: \"genres\",\n        accessor: d => d.genres,\n        Cell: props => props.original.genres.split(\"|\").join(\" | \"),\n        filterable: true,\n        sortable: true,\n        filterAll: true\n      },\n      {\n        Header: \"Language\",\n        accessor: \"language\",\n        filterable: true,\n        sortable: true,\n        filterAll: true\n      },\n      {\n        Header: \"Country\",\n        accessor: \"country\",\n        filterable: true,\n        sortable: true,\n        filterAll: true\n      },\n      {\n        Header: \"Content Rating\",\n        accessor: \"content_rating\"\n      },\n      {\n        Header: \"Budget\",\n        accessor: \"budget\",\n        filterable: true,\n        sortable: true,\n        filterMethod: (filter, row) => {\n          return parseInt(row[filter.id]) >= parseInt(filter.value);\n        }\n      },\n      {\n        Header: \"Title Year\",\n        accessor: \"title_year\",\n        filterable: true,\n        sortable: true,\n        filterAll: true\n      },\n      {\n        Header: \"Plot Keywords\",\n        accessor: \"plot_keywords\",\n        Cell: props => props.original.genres.split(\"|\").join(\" | \")\n      },\n      {\n        Header: \"IMBD link\",\n        accessor: \"movie_imdb_link\",\n        Cell: props => (\n          <a\n            href={props.original.movie_imdb_link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {props.original.movie_title}\n          </a>\n        )\n      }\n    ];\n    const filterMethod = (filter, rows) =>\n      matchSorter(rows, filter.value, { keys: [filter.id] });\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>\n            Movie Explorer{\" \"}\n            <Toggle\n              defaultChecked={this.state.lightTheme}\n              icons={false}\n              className=\"toggleButton\"\n              onChange={this.handleThemeChange}\n            />\n          </h2>\n        </header>\n        <section>\n          {this.state.loading ? (\n            <h2>Loading data...</h2>\n          ) : (\n            <ReactTable\n              className=\"-striped -highlight\"\n              data={this.state.list}\n              columns={columns}\n              defaultPageSize={10}\n              filterable={false}\n              sortable={false}\n              defaultFilterMethod={filterMethod}\n            />\n          )}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}